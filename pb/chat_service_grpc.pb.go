// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: chat_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatServiceClient interface {
	CreateNewAccount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserCreatedResponse, error)
	LogIntoAccount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserAuthenticatedResponse, error)
	ChatStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error)
	JoinDirectChat(ctx context.Context, in *JoinDirectChatRequest, opts ...grpc.CallOption) (*JoinDirectChatResponse, error)
	JoinGroupChat(ctx context.Context, in *GroupChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	GetDirectChatRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JoinDirectChatResponses, error)
	GetChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatsResponse, error)
	CreateGroupChat(ctx context.Context, in *GroupChatRequest, opts ...grpc.CallOption) (*ChatResponse, error)
	DirectChatRequestAction(ctx context.Context, in *DirectChatAction, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type chatServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewChatServiceClient(cc grpc.ClientConnInterface) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) CreateNewAccount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserCreatedResponse, error) {
	out := new(UserCreatedResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CreateNewAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) LogIntoAccount(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserAuthenticatedResponse, error) {
	out := new(UserAuthenticatedResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/LogIntoAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) ChatStream(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ChatService_ServiceDesc.Streams[0], "/chat.ChatService/ChatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatStreamClient{stream}
	return x, nil
}

type ChatService_ChatStreamClient interface {
	Send(*MessageStream) error
	Recv() (*MessageStream, error)
	grpc.ClientStream
}

type chatServiceChatStreamClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatStreamClient) Send(m *MessageStream) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatStreamClient) Recv() (*MessageStream, error) {
	m := new(MessageStream)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) JoinDirectChat(ctx context.Context, in *JoinDirectChatRequest, opts ...grpc.CallOption) (*JoinDirectChatResponse, error) {
	out := new(JoinDirectChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/JoinDirectChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) JoinGroupChat(ctx context.Context, in *GroupChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/JoinGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetDirectChatRequests(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*JoinDirectChatResponses, error) {
	out := new(JoinDirectChatResponses)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetDirectChatRequests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) GetChats(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ChatsResponse, error) {
	out := new(ChatsResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/GetChats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) CreateGroupChat(ctx context.Context, in *GroupChatRequest, opts ...grpc.CallOption) (*ChatResponse, error) {
	out := new(ChatResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/CreateGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) DirectChatRequestAction(ctx context.Context, in *DirectChatAction, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/chat.ChatService/DirectChatRequestAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServiceServer is the server API for ChatService service.
// All implementations must embed UnimplementedChatServiceServer
// for forward compatibility
type ChatServiceServer interface {
	CreateNewAccount(context.Context, *UserRequest) (*UserCreatedResponse, error)
	LogIntoAccount(context.Context, *UserRequest) (*UserAuthenticatedResponse, error)
	ChatStream(ChatService_ChatStreamServer) error
	JoinDirectChat(context.Context, *JoinDirectChatRequest) (*JoinDirectChatResponse, error)
	JoinGroupChat(context.Context, *GroupChatRequest) (*ChatResponse, error)
	GetDirectChatRequests(context.Context, *emptypb.Empty) (*JoinDirectChatResponses, error)
	GetChats(context.Context, *emptypb.Empty) (*ChatsResponse, error)
	CreateGroupChat(context.Context, *GroupChatRequest) (*ChatResponse, error)
	DirectChatRequestAction(context.Context, *DirectChatAction) (*emptypb.Empty, error)
	mustEmbedUnimplementedChatServiceServer()
}

// UnimplementedChatServiceServer must be embedded to have forward compatible implementations.
type UnimplementedChatServiceServer struct {
}

func (UnimplementedChatServiceServer) CreateNewAccount(context.Context, *UserRequest) (*UserCreatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateNewAccount not implemented")
}
func (UnimplementedChatServiceServer) LogIntoAccount(context.Context, *UserRequest) (*UserAuthenticatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogIntoAccount not implemented")
}
func (UnimplementedChatServiceServer) ChatStream(ChatService_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedChatServiceServer) JoinDirectChat(context.Context, *JoinDirectChatRequest) (*JoinDirectChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinDirectChat not implemented")
}
func (UnimplementedChatServiceServer) JoinGroupChat(context.Context, *GroupChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinGroupChat not implemented")
}
func (UnimplementedChatServiceServer) GetDirectChatRequests(context.Context, *emptypb.Empty) (*JoinDirectChatResponses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDirectChatRequests not implemented")
}
func (UnimplementedChatServiceServer) GetChats(context.Context, *emptypb.Empty) (*ChatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChats not implemented")
}
func (UnimplementedChatServiceServer) CreateGroupChat(context.Context, *GroupChatRequest) (*ChatResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupChat not implemented")
}
func (UnimplementedChatServiceServer) DirectChatRequestAction(context.Context, *DirectChatAction) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DirectChatRequestAction not implemented")
}
func (UnimplementedChatServiceServer) mustEmbedUnimplementedChatServiceServer() {}

// UnsafeChatServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServiceServer will
// result in compilation errors.
type UnsafeChatServiceServer interface {
	mustEmbedUnimplementedChatServiceServer()
}

func RegisterChatServiceServer(s grpc.ServiceRegistrar, srv ChatServiceServer) {
	s.RegisterService(&ChatService_ServiceDesc, srv)
}

func _ChatService_CreateNewAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateNewAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CreateNewAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateNewAccount(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_LogIntoAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).LogIntoAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/LogIntoAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).LogIntoAccount(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).ChatStream(&chatServiceChatStreamServer{stream})
}

type ChatService_ChatStreamServer interface {
	Send(*MessageStream) error
	Recv() (*MessageStream, error)
	grpc.ServerStream
}

type chatServiceChatStreamServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatStreamServer) Send(m *MessageStream) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatStreamServer) Recv() (*MessageStream, error) {
	m := new(MessageStream)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ChatService_JoinDirectChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinDirectChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinDirectChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/JoinDirectChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinDirectChat(ctx, req.(*JoinDirectChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_JoinGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).JoinGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/JoinGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).JoinGroupChat(ctx, req.(*GroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetDirectChatRequests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetDirectChatRequests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetDirectChatRequests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetDirectChatRequests(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_GetChats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).GetChats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/GetChats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).GetChats(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_CreateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).CreateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/CreateGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).CreateGroupChat(ctx, req.(*GroupChatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_DirectChatRequestAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DirectChatAction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).DirectChatRequestAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/DirectChatRequestAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).DirectChatRequestAction(ctx, req.(*DirectChatAction))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatService_ServiceDesc is the grpc.ServiceDesc for ChatService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateNewAccount",
			Handler:    _ChatService_CreateNewAccount_Handler,
		},
		{
			MethodName: "LogIntoAccount",
			Handler:    _ChatService_LogIntoAccount_Handler,
		},
		{
			MethodName: "JoinDirectChat",
			Handler:    _ChatService_JoinDirectChat_Handler,
		},
		{
			MethodName: "JoinGroupChat",
			Handler:    _ChatService_JoinGroupChat_Handler,
		},
		{
			MethodName: "GetDirectChatRequests",
			Handler:    _ChatService_GetDirectChatRequests_Handler,
		},
		{
			MethodName: "GetChats",
			Handler:    _ChatService_GetChats_Handler,
		},
		{
			MethodName: "CreateGroupChat",
			Handler:    _ChatService_CreateGroupChat_Handler,
		},
		{
			MethodName: "DirectChatRequestAction",
			Handler:    _ChatService_DirectChatRequestAction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ChatService_ChatStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat_service.proto",
}
